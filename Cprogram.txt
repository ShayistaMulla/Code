#include<iostream>
#include<string>
//Bit stuffing
using namespace std;
int main(){
string stream,stuffedStream;
cout<<"Enter the stream of bits :";
cin>>stream;
stuffedStream=stream;
int count=0,j,appendBit=0;
int l=stream.length();
    for(int i=0;i<stream.length();i++)
    {
        if(stream[i]=='1')
            count++;
        if(stream[i]=='0')
            count=0;
        if(count==5){
            count=0;
            stuffedStream+="0";
            l++;
            appendBit++;
            j=1;
            while(j>i+2){
                stuffedStream[j-1]=stuffedStream[j-2];
                j--;
            }
            stuffedStream[i+appendBit]='0';
        }
    }
    cout<<"output stream after bit stuffing :"<<stuffedStream;
    return 0;
}

//Byte stuffing 
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
main()
{
    int i=0,j=0,n,pos;
    char a[100],copy[100],b[50],ch;
    printf("Enter string :");
    gets(a);
    strcpy(copy, a);
    n=strlen(a);
    printf("Enter position :");
    scanf("%d", &pos);
    if(pos>n)
    {
        printf("Invalid position!! Enter again :");
        scanf("%d",&pos);
    }
    printf("Enter the character :");
    ch = getche();
    b[0]='d';
    b[1]='l';
    b[2]='e';
    b[3]='s';
    b[4]='t';
    b[5]='x';
    j=6;
    while(i<n)
    {
        if(i==pos-1)
        {
            b[j]='d';
            b[j+1]='l';
            b[j+2]='e';
            b[j+3]=ch;
            b[j+4]='d';
            b[j+5]='l';
            b[j+6]='e';
            j=j+7;
        }
        if(a[i]=='d' && a[i+1]=='1' && a[i+2]=='e')
        {
            b[j]='d';
            b[j+1]='l';
            b[j+2]='e';
            j=j+3;
        }
        b[j]= a[i];
        i++;
        j++;
    }
    b[j]='d';
    b[j+1]='l';
    b[j+2]='e';
    b[j+3]='e';
    b[j+4]='t';
    b[j+5]='x';
    b[j+6]='\0';
    printf("\n Frame after stuffing:\n");
    printf("%s",b);
    printf("\n Frame after destuffing:\n");
    printf("%s",copy);
    getch();
}

//Distance

#include<stdio.h>
#include<string.h>
struct node
{
    int dist[20];
    int from[20];
}rt[10];
int main()
{
    int dmat[20][20],i,j,k;
    int n=i=j=k=0,count=0;
    printf("Enter the number of nodes\n");
    scanf("%d",&n);
    printf("Enter the cost of matrix\n");
    for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    {
        scanf("%d",&dmat[i][j]);
        dmat[i][i]=0;
        rt[i].dist[j]=dmat[i][j];
        rt[i].from[j]=j;
    }
    do
    {
        count=0;
        for(i=0;i<n;i++)
        for(j=0;j<n;j++)
        for(k=0;k<n;k++)
            if(rt[i].dist[j]>dmat[i][k]+rt[k].dist[j])
            {
                rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
                rt[i].from[j]=k;
                count++;
            }
    }
    while(count!=0);
    for(i=0;i<n;i++)
    {
        printf("State value for router %d is\n",i);
        for(j=0;j<n;j++)
        printf("\t\tvia %d Distance %d\n",rt[i].from[j],rt[i].dist[j]);
    }
}


//dijkstra

#include<stdio.h>
#include<conio.h>
#define INFINITY 9999
#define MAX 10
void dijkstra(int G[MAX][MAX],int n,int startnode);
int main()
{
    int G[MAX][MAX],i,j,n,u;
    printf("Enter no, of vertices :");
    scanf("%d",&n);
    printf("\n Enter the adjacency matrix :\n");

    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            scanf("%d",&G[i][j]);
    printf("\n Enter the starting node :");
    scanf("%d",&u);
    dijkstra(G,n,u);
    return 0;
}

void dijkstra(int G[MAX][MAX],int n,int startnode){
 int cost[MAX][MAX],distance[MAX],pred[MAX];
 int visited[MAX],count,mindistance,nextnode,i,j;

 for(i=0;i<n;i++)
    for(j=0;j<n;j++)
        if(G[i][j]==0)
            cost[i][j]=INFINITY;
        else
            cost[i][j]=G[i][j];
 for(i=0;i<n;i++){
    distance[i]=cost[startnode][i];
    pred[i]=startnode;
    visited[i]=0;
 }

 distance[startnode]=0;
 visited[startnode]=1;
 count=1;

 while(count<n-1){
    mindistance =INFINITY;
    for(i=0;i<n;i++)
    if(distance[i]< mindistance && !visited[i]){
        mindistance=distance[i];
        nextnode=i;
    }
    visited[nextnode]=1;
    for(i=0;i<n;i++)
        if(!visited[i])
	    if(mindistance+cost[nextnode][i]<distance[i]){
	        distance[i]=mindistance+cost[nextnode][i];
	        pred[i]=nextnode;
	    }
    count++;
 }

 for(i=0;i<n;i++)
    if(i!=startnode){
        printf("\n Distance of node %d=%d",i,distance[i]);
        printf("\n path =%d",i);
        j=i;
        do{
            j=pred[j];
            printf("<-- %d",j);
        }while(j!=startnode);
    }
}

//CRC

#include<stdio.h>
#include<string.h>
#define N strlen(g)
char t[28],cs[28],g[]="1001000000100001";
int a,e,c;
void xor(){
    for(c=1;c<N;c++)
        cs[c]=((cs[c]==g[c])?'0':'1');
}

void crc(){
    for(e=0;e<N;e++)
        cs[e]=t[e];
    do{
        if(cs[0]=='1')
            xor();
        for(c=0;c<N-1;c++)
            cs[c]=cs[c+1];
        cs[c]=t[e++];
    }while(e<=a+N-1);
}

int main(){
 printf("\n Enter data :");
 scanf("%s",t);
 printf("\n Generating polynomial : %s",g);
 a=strlen(t);
 for(e=a;e<a+N-1;e++)
    t[e]='0';
 printf("\n------------");
 printf("\n Modified data is : %s ",t);
 printf("\n -----");
 crc();
 printf("\n Checksum is : %s ",cs);
 for(e=a;e<a+N-1;e++)
    t[e]=cs[e-a];
 printf("\n -----");
 printf("\n Final codeword is : %s",t);
 printf("\n Test error detection 0(yes) 1(n)? :");
 scanf("%d",&e);
 if(e==0){
    do{
        printf("\n Enter the position where error is to be inserted :");
        scanf("%d",&e);
    }while(e==0|| e>a+N-1);

    t[e-1]=(t[e-1]=='0')?'1':'0';
    printf("\n -------");
    printf("\n Erroneous data :%s \n",t);

 }

 crc();
 for(e=0;(e<N-1) && (cs[e]!='1');e++);
 if(e<N-1)
    printf("\n Error detected \n");
 else
    printf("\n No error detected\n");
 printf("\n -----");
 return 0;
}

//Leaky bucket

#include<stdio.h>
#define BUCKET_MAX 10
#define FLOW_MAX 7
int main(){
    int bucket=0, packets,outgoing ;
    for(int t=1; ; t++){
        printf("\n\n At time t=%d sec\n",t);
        printf("\n Packets in bucket:%d\n",bucket);
        printf("\n Incoming packets:");
        scanf("%d",&packets);

            if (packets+bucket>BUCKET_MAX){
                printf("\n Packets discarded:%d\n", packets+bucket-BUCKET_MAX);
                bucket=BUCKET_MAX;
            }else{
                printf("\n No packet discarded\n");
                bucket += packets;
            }

            if(bucket<= FLOW_MAX){
                outgoing=bucket;
            }else{
                outgoing=FLOW_MAX;
                printf("\n Limiting Flow");
            }
            printf("\n Outgoing packets;%d\n",outgoing);
            bucket-=outgoing;
        }
        return 0;
}
